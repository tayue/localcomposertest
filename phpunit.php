<?php
require './vendor/autoload.php';

use PHPUnit\Framework\TestCase;

class StackTest extends TestCase
{
    protected $stack;

    protected function setUp()
    {
        $this->stack = [1, 2];
    }

    protected function tearDown(): void
    {

        $this->stack = [];
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testEmpty()
    {
        print_r($this->stack);
        $this->assertTrue(empty($this->stack));
    }

    public function testPush()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', $this->stack[count($this->stack) - 1]);
        $this->assertFalse(empty($this->stack));
    }

    public function testPop()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', array_pop($this->stack));
        $this->assertTrue(empty($this->stack));
    }


    public function testProducerFirst()
    {
        $this->assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this->assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this->assertEquals(
            ['first', 'second'],
            func_get_args()
        );
    }


    /**
     * @dataProvider additionProvider1
     */
    public function testAdd($a, $b, $expected)
    {
        var_dump($a . "=>" . $b . "=>" . $expected);
        $this->assertEquals($expected, $a + $b);
    }

    public function testEquality()
    {
        $this->assertEquals(
            [1, 2, 3, 4, 5, 6],
            [1, 2, 33, 4, 5, 6]
        );
    }

    /**
     * @expectedException PHPUnit\Framework\Error\Notice
     */
    public function testFailingInclude()
    {
        $arr = [1];
        echo $arr[2];
    }

    public function testExpectFooActualFoo()
    {
        $this->expectOutputString('foo');
        print 'foo';
    }

    public function testExpectBarActualBaz()
    {
        $this->expectOutputString('bar');
        print 'baz';
    }

    public function additionProvider()
    {
        return [
            [0, 0, 0],
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 3]
        ];
    }

    public function additionProvider1()
    {
        return new CsvFileIterator('./data.csv');
    }

}


class CsvFileIterator implements Iterator
{
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file)
    {
        $this->file = fopen($file, 'r');
    }

    public function __destruct()
    {
        fclose($this->file);
    }

    public function rewind()
    {
        rewind($this->file);
        $this->current = fgetcsv($this->file);
        $this->key = 0;
    }

    public function valid()
    {
        return !feof($this->file);
    }

    public function key()
    {
        return $this->key;
    }

    public function current()
    {
        return $this->current;
    }

    public function next()
    {
        $this->current = fgetcsv($this->file);
        $this->key++;
    }
}
